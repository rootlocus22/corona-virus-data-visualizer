{"version":3,"sources":["components/pie-chart/pieChart.js","components/bar-chart/barChart.js","App.js","serviceWorker.js","index.js"],"names":["am4core","am4themes_animated","PieChart","useEffect","a","fetch","response","json","data","transformedData","statewise","map","val","state","active","shift","chart","am4charts","pieSeries","series","push","dataFields","value","category","innerRadius","slices","template","stroke","strokeWidth","strokeOpacity","labels","disabled","ticks","states","getKey","properties","shiftRadius","scale","window","screen","availWidth","legend","responsive","enabled","rules","relevant","target","stateId","fetchStateData","id","am4themes_kelly","BarChart","confirmed","recovered","deaths","categoryAxis","xAxes","title","text","renderer","grid","location","yAxes","valueY","categoryX","name","tooltipText","series2","series3","stacked","cursor","scrollbarX","scrollbarY","ExpansionPanel","withStyles","root","border","boxShadow","borderBottom","display","margin","expanded","MuiExpansionPanel","ExpansionPanelSummary","backgroundColor","marginBottom","minHeight","content","MuiExpansionPanelSummary","theme","padding","spacing","MuiExpansionPanelDetails","CustomizedExpansionPanels","React","useState","setExpanded","handleChange","panel","event","newExpanded","square","onChange","expandIcon","aria-controls","Typography","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dbc84a7d.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\nimport './pieChart.css'\r\n\r\nam4core.useTheme(am4themes_animated);\r\n\r\nconst PieChart = () => {\r\n\r\n    useEffect(() => {\r\n        async function fetchStateData() {\r\n            let response = await fetch(`https://api.covid19india.org/data.json`);\r\n            let data = await response.json();\r\n            let transformedData = data.statewise.map(val => {\r\n                return { state: val.state, active: val.active }\r\n            });\r\n            transformedData.shift();\r\n            var chart = am4core.create(\"pieChartDiv\", am4charts.PieChart3D);\r\n            chart.data = transformedData;\r\n            // Add and configure Series\r\n            var pieSeries = chart.series.push(new am4charts.PieSeries3D());\r\n            pieSeries.dataFields.value = \"active\";\r\n            pieSeries.dataFields.category = \"state\";\r\n            chart.innerRadius = am4core.percent(40);\r\n            pieSeries.slices.template.stroke = am4core.color(\"#fff\");\r\n            pieSeries.slices.template.strokeWidth = 2;\r\n            pieSeries.slices.template.strokeOpacity = 1;\r\n\r\n            // Disabling labels and ticks on inner circle\r\n            pieSeries.labels.template.disabled = true;\r\n            pieSeries.ticks.template.disabled = true;\r\n            // Put a thick white border around each Slice\r\n            pieSeries.slices.template.states.getKey(\"hover\").properties.shiftRadius = 0;\r\n            pieSeries.slices.template.states.getKey(\"hover\").properties.scale = 1.1;\r\n            // Add a legend\r\n            if(window.screen.availWidth > 600) {\r\n                chart.legend = new am4charts.Legend();\r\n            }\r\n            chart.responsive.enabled = true;\r\n\r\n            chart.responsive.rules.push({\r\n                relevant: function (target) {\r\n                    return false;\r\n                },\r\n                state: function (target, stateId) {\r\n                    return;\r\n                }\r\n            });\r\n        }\r\n        fetchStateData();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <div id=\"pieChartDiv\"></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PieChart;","import React, { useEffect } from 'react';\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\nimport am4themes_kelly from \"@amcharts/amcharts4/themes/kelly\";\r\nimport './barChart.css'\r\nam4core.useTheme(am4themes_animated);\r\nam4core.useTheme(am4themes_kelly);\r\n\r\nconst BarChart = () => {\r\n    useEffect(() => {\r\n        async function fetchStateData() {\r\n            let response = await fetch(`https://api.covid19india.org/data.json`);\r\n            let data = await response.json();\r\n            let transformedData = data.statewise.map(({ state, active, confirmed, recovered, deaths }) => {\r\n                return { state, active, confirmed, recovered, deaths }\r\n            });\r\n            transformedData.shift();\r\n            // Create chart instance\r\n            var chart = am4core.create(\"barChartDiv\", am4charts.XYChart3D);\r\n\r\n            // Add data\r\n            chart.data = transformedData;\r\n            // Create axes\r\n            var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n            categoryAxis.dataFields.category = \"state\";\r\n            categoryAxis.title.text = \"State covid cases\";\r\n            categoryAxis.renderer.grid.template.location = 0;\r\n            // categoryAxis.renderer.minGridDistance = 20;\r\n\r\n            var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n            valueAxis.title.text = \"Active Cases\";\r\n\r\n            // Create series\r\n            var series = chart.series.push(new am4charts.ColumnSeries3D());\r\n            series.dataFields.valueY = \"active\";\r\n            series.dataFields.categoryX = \"state\";\r\n            series.name = \"Active\";\r\n            series.tooltipText = \"{name}: [bold]{valueY}[/]\";\r\n            // This has no effect\r\n            // series.stacked = true;\r\n\r\n            var series2 = chart.series.push(new am4charts.ColumnSeries3D());\r\n            series2.dataFields.valueY = \"recovered\";\r\n            series2.dataFields.categoryX = \"state\";\r\n            series2.name = \"Recovered\";\r\n            series2.tooltipText = \"{name}: [bold]{valueY}[/]\";\r\n            // Do not try to stack on top of previous series\r\n            // series2.stacked = true;\r\n\r\n            var series3 = chart.series.push(new am4charts.ColumnSeries3D());\r\n            series3.dataFields.valueY = \"deaths\";\r\n            series3.dataFields.categoryX = \"state\";\r\n            series3.name = \"Deaths\";\r\n            series3.tooltipText = \"{name}: [bold]{valueY}[/]\";\r\n            series3.stacked = true;\r\n\r\n            // Add cursor\r\n            chart.cursor = new am4charts.XYCursor();\r\n\r\n            // Add legend\r\n            chart.legend = new am4charts.Legend();\r\n            chart.scrollbarX = new am4core.Scrollbar();\r\n            chart.scrollbarY = new am4core.Scrollbar();\r\n            chart.responsive.enabled = true;\r\n\r\n            chart.responsive.rules.push({\r\n                relevant: function (target) {\r\n                    return false;\r\n                },\r\n                state: function (target, stateId) {\r\n                    return;\r\n                }\r\n            });\r\n        }\r\n        fetchStateData();\r\n\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <div id=\"barChartDiv\"></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BarChart;","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport MuiExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport MuiExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport MuiExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Typography from '@material-ui/core/Typography';\nimport PieChart from './components/pie-chart/pieChart';\nimport BarChart from './components/bar-chart/barChart';\n\nconst ExpansionPanel = withStyles({\n  root: {\n    border: '1px solid rgba(0, 0, 0, .125)',\n    boxShadow: 'none',\n    '&:not(:last-child)': {\n      borderBottom: 0,\n    },\n    '&:before': {\n      display: 'none',\n    },\n    '&$expanded': {\n      margin: 'auto',\n    },\n  },\n  expanded: {},\n})(MuiExpansionPanel);\n\nconst ExpansionPanelSummary = withStyles({\n  root: {\n    backgroundColor: 'rgba(0, 0, 0, .03)',\n    borderBottom: '1px solid rgba(0, 0, 0, .125)',\n    marginBottom: -1,\n    minHeight: 56,\n    '&$expanded': {\n      minHeight: 56,\n    },\n  },\n  content: {\n    '&$expanded': {\n      margin: '12px 0',\n    },\n  },\n  expanded: {},\n})(MuiExpansionPanelSummary);\n\nconst ExpansionPanelDetails = withStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiExpansionPanelDetails);\n\nexport default function CustomizedExpansionPanels() {\n  const [expanded, setExpanded] = React.useState('panel1');\n\n  const handleChange = (panel) => (event, newExpanded) => {\n    setExpanded(newExpanded ? panel : false);\n  };\n\n  return (\n    <div>\n      <ExpansionPanel square expanded={expanded === 'panel1'} onChange={handleChange('panel1')}>\n        <ExpansionPanelSummary  expandIcon={<ExpandMoreIcon />} aria-controls=\"panel1d-content\" id=\"panel1d-header\">\n          <Typography>Covid19 Cases in India Overview</Typography>\n        </ExpansionPanelSummary>\n          <PieChart></PieChart>\n      </ExpansionPanel>\n      <ExpansionPanel square expanded={expanded === 'panel2'} onChange={handleChange('panel2')}>\n        <ExpansionPanelSummary  expandIcon={<ExpandMoreIcon />} aria-controls=\"panel2d-content\" id=\"panel2d-header\">\n          <Typography>State wise data</Typography>\n        </ExpansionPanelSummary>\n         <BarChart></BarChart>\n      </ExpansionPanel>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}